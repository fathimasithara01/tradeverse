package models

import (
	"time"

	"gorm.io/gorm"
)

type Wallet struct {
	gorm.Model          // Provides ID, CreatedAt, UpdatedAt, DeletedAt
	UserID      uint    `gorm:"uniqueIndex;not null"`            // One wallet per user
	Balance     float64 `gorm:"type:numeric(18,4);default:0.00"` // Store as numeric for precision
	Currency    string  `gorm:"size:3;default:'INR'"`            // e.g., INR, USD
	LastUpdated time.Time
	// Version         uint      `gorm:"default:1"` // For optimistic locking (optional but good for concurrency)
}

type TransactionType string

const (
	TxTypeDeposit  TransactionType = "DEPOSIT"
	TxTypeWithdraw TransactionType = "WITHDRAW"
	TxTypeFee      TransactionType = "FEE"
	TxTypeTransfer TransactionType = "TRANSFER"
	TxTypeReversal TransactionType = "REVERSAL"
)

type TransactionStatus string

const (
	TxStatusPending   TransactionStatus = "PENDING"
	TxStatusSuccess   TransactionStatus = "SUCCESS"
	TxStatusFailed    TransactionStatus = "FAILED"
	TxStatusCancelled TransactionStatus = "CANCELLED"
	TxStatusReversed  TransactionStatus = "REVERSED"
)

type WalletTransaction struct {
	gorm.Model                           // Provides ID, CreatedAt, UpdatedAt, DeletedAt
	WalletID           uint              `gorm:"index;not null"`
	UserID             uint              `gorm:"index;not null"` // Redundant but useful for direct querying
	TransactionType    TransactionType   `gorm:"size:20;not null"`
	Amount             float64           `gorm:"type:numeric(18,4);not null"`
	Currency           string            `gorm:"size:3;not null"`
	Status             TransactionStatus `gorm:"size:20;not null"`
	ReferenceID        string            `gorm:"size:100"` // Internal reference ID (e.g., deposit request ID)
	PaymentGatewayTxID string            `gorm:"size:100"` // Transaction ID from external payment gateway
	Description        string            `gorm:"type:text"`
	BalanceBefore      float64           `gorm:"type:numeric(18,4)"` // Balance before this transaction
	BalanceAfter       float64           `gorm:"type:numeric(18,4)"` // Balance after this transaction
}

type DepositRequest struct {
	gorm.Model                            // Provides ID, CreatedAt, UpdatedAt, DeletedAt
	UserID              uint              `gorm:"index;not null"`
	Amount              float64           `gorm:"type:numeric(18,4);not null"`
	Currency            string            `gorm:"size:3;not null"`
	Status              TransactionStatus `gorm:"size:20;not null"` // PENDING, SUCCESS, FAILED
	PaymentGateway      string            `gorm:"size:50"`          // e.g., "Razorpay", "Stripe"
	PaymentGatewayTxID  string            `gorm:"size:100"`         // The ID generated by the payment gateway for this deposit
	RedirectURL         string            `gorm:"size:255"`         // URL to redirect user to for payment
	WalletTransactionID *uint             `gorm:"index"`            // Link to the actual wallet transaction (if successful)
}

type WithdrawRequest struct {
	gorm.Model                            // Provides ID, CreatedAt, UpdatedAt, DeletedAt
	UserID              uint              `gorm:"index;not null"`
	Amount              float64           `gorm:"type:numeric(18,4);not null"`
	Currency            string            `gorm:"size:3;not null"`
	Status              TransactionStatus `gorm:"size:20;not null"`  // PENDING, SUCCESS, FAILED
	BeneficiaryAccount  string            `gorm:"size:100;not null"` // Bank account, UPI ID, etc.
	PaymentGateway      string            `gorm:"size:50"`
	PaymentGatewayTxID  string            `gorm:"size:100"` // The ID generated by the payment gateway for this withdrawal
	WalletTransactionID *uint             `gorm:"index"`    // Link to the actual wallet transaction (if successful)
}

type WalletSummaryResponse struct {
	UserID      uint      `json:"user_id"`
	Balance     float64   `json:"balance"`
	Currency    string    `json:"currency"`
	LastUpdated time.Time `json:"last_updated"`
}

type DepositRequestInput struct {
	Amount   float64 `json:"amount" binding:"required,gt=0"`
	Currency string  `json:"currency" binding:"required,oneof=INR USD"` // Add more currencies as needed
}

type DepositResponse struct {
	DepositID          uint              `json:"deposit_id"`
	Amount             float64           `json:"amount"`
	Currency           string            `json:"currency"`
	Status             TransactionStatus `json:"status"`
	RedirectURL        string            `json:"redirect_url,omitempty"`          // URL to which the client should redirect
	PaymentGatewayTxID string            `json:"payment_gateway_tx_id,omitempty"` // ID from the PG, useful for tracking
	Message            string            `json:"message"`
}

type DepositVerifyInput struct {
	PaymentGatewayTxID string  `json:"payment_gateway_tx_id" binding:"required"` // The payment ID from the gateway
	Amount             float64 `json:"amount"`                                   // Optional: for verification, though usually matched with deposit request
	Status             string  `json:"status"`                                   // "SUCCESS", "FAILED", "PENDING"
	WebhookSignature   string  `json:"webhook_signature,omitempty"`              // For verifying webhook authenticity
}

type WithdrawalRequestInput struct {
	Amount             float64 `json:"amount" binding:"required,gt=0"`
	Currency           string  `json:"currency" binding:"required,oneof=INR USD"`
	BeneficiaryAccount string  `json:"beneficiary_account" binding:"required"` // e.g., Bank account number, UPI ID
}

type WithdrawalResponse struct {
	WithdrawalID       uint              `json:"withdrawal_id"`
	Amount             float64           `json:"amount"`
	Currency           string            `json:"currency"`
	Status             TransactionStatus `json:"status"`
	PaymentGatewayTxID string            `json:"payment_gateway_tx_id,omitempty"`
	Message            string            `json:"message"`
}

type TransactionListResponse struct {
	Transactions []WalletTransaction `json:"transactions"`
	Total        int64               `json:"total"`
	Page         int                 `json:"page"`
	Limit        int                 `json:"limit"`
}

type PaginationParams struct {
	Page  int `form:"page,default=1"`
	Limit int `form:"limit,default=10"`
}
